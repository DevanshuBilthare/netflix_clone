{"version":3,"sources":["requests.js","axios.js","Components/Row/Row.component.jsx","Components/Banner/Banner.component.jsx","Components/Navbar/Navbar.component.jsx","App.js","serviceWorker.js","index.js"],"names":["API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrrorMovies","fetchRomanceMovies","fetchDocumentries","instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","className","map","movie","key","id","onClick","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","err","console","log","handleClick","src","poster_path","backdrop_path","alt","videoId","opts","height","width","playerVars","autoplay","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundImage","original_name","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.20fef9f0.chunk.js","sourcesContent":["export const API_KEY = '11788a34b62475f86f74a58fd3c1d473'\r\n\r\nconst requests = {\r\n    // fetchTrending: `/movie/12?api_key=11788a34b62475f86f74a58fd3c1d473&language=en-US`,\r\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchHorrrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n    fetchDocumentries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n\r\n\r\n}\r\n\r\nexport default requests;","import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://api.themoviedb.org/3'\r\n})\r\n\r\nexport default instance;","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"../../axios\";\r\nimport \"./Row.styles.css\";\r\nimport YouTube from \"react-youtube\";\r\nimport movieTrailer from \"movie-trailer\";\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\r\n\r\nfunction Row({ title, fetchUrl, isLargeRow }) {\r\n  const [movies, setMovies] = useState([]);\r\n  const [trailerUrl, setTrailerUrl] = useState('');\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      // console.log(fetchUrl);\r\n      const request = await axios.get(fetchUrl);\r\n      setMovies(request.data.results);\r\n      return request;\r\n    }\r\n    fetchData();\r\n  }, [fetchUrl]); //run once when the row loads if blank or everytime the dependency changes\r\n\r\n  const opts = {\r\n    height: \"300\",\r\n    width: \"100%\",\r\n    playerVars: {\r\n      autoplay: 1,\r\n    },\r\n  };\r\n\r\n  const handleClick = (movie) => {\r\n    if (trailerUrl) {\r\n      setTrailerUrl(\"\");\r\n    } else {\r\n      movieTrailer(movie?.name || '')\r\n        .then((url) => {\r\n          const urlParams = new URLSearchParams(new URL(url).search);\r\n          setTrailerUrl(urlParams.get(\"v\"));\r\n        })\r\n        .catch((err) => console.log(err));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <h2>{title}</h2>\r\n      <div className=\"row_posters\">\r\n        {movies.map((movie) => (\r\n          <img\r\n            key={movie.id}\r\n            onClick={() => handleClick(movie)}\r\n            className={`row_poster ${isLargeRow && \"row_posterlarge\"}`}\r\n            src={`${base_url}${\r\n              isLargeRow ? movie.poster_path : movie.backdrop_path\r\n            }`}\r\n            alt={movie.name}\r\n          />\r\n        ))}\r\n      </div>\r\n      {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Row;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"../../axios\";\r\nimport requests from \"../../requests\";\r\nimport \"./Banner.styles.css\";\r\n\r\nfunction Banner() {\r\n  const [movie, setMovie] = useState([]);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(requests.fetchNetflixOriginals);\r\n      setMovie(\r\n        request.data.results[\r\n          Math.floor(Math.random() * request.data.results.length - 1)\r\n        ]\r\n      );\r\n      return request;\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n  console.log(movie);\r\n  function truncate(str, n){\r\n      return str?.length > n ? str.substr(0, n-1) + \"...\" : str;\r\n  }\r\n\r\n  return (\r\n    <header\r\n      className=\"banner\"\r\n      style={{\r\n        backgroundImage: `url('https://image.tmdb.org/t/p/original/${movie?.backdrop_path}')`,\r\n      }}\r\n    >\r\n      <div className=\"banner_contents\">\r\n        <h1 className='banner_title '>{movie?.title || movie?.name || movie?.original_name}</h1>\r\n\r\n        <div className=\"banner_buttons\">\r\n          <button className=\"banner_button\">Play</button>\r\n          <button className=\"banner_button\">My List</button>\r\n        </div>\r\n        <h1 className=\"banner_description\">{truncate(movie?.overview, 150)}</h1>\r\n      </div>\r\n      <div className='banner_fadeBottom'></div>\r\n\r\n      {/* title */}\r\n      {/* divs > 2 button*/}\r\n      {/* desceiption */}\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Banner;\r\n","import React, { useState } from \"react\";\r\nimport \"./Navbar.styles.css\";\r\nimport { useEffect } from \"react\";\r\n\r\nfunction Nav() {\r\n    const [show, handleShow] = useState(false);\r\n\r\n    useEffect(() => { \r\n         window.addEventListener('scroll', () => {\r\n             if(window.scrollY > 100){\r\n                handleShow(true)\r\n             } else handleShow(false)\r\n         })\r\n         return () => {\r\n             window.removeEventListener('scroll')\r\n         }\r\n    }, [])\r\n\r\n  return (\r\n    <div className={`nav ${show && 'nav_black'}`}>\r\n      <img\r\n        className=\"nav_logo\"\r\n        src=\"https://lh3.googleusercontent.com/proxy/dNftQgvJsFM6JPzibCwXRecCqUXnxcjQhYpJf7d9b7-WnWty3L-TqlHHEeIw_jfbNR28r2wDvVdVfkjFKKHpCCH6ZtZurVzomQaDBYfn-BHd9M1_-_o\"\r\n        // src=\"https://upload.wikipedia.org/wikipedia/commons/0/0f\"\r\n        alt=\"Netflix Logo\"\r\n      />\r\n      <img\r\n        className=\"nav_avatar\"\r\n        src='https://www.pngitem.com/pimgs/m/317-3175297_netflix-and-chill-png-transparent-png.png'\r\n        // src=\"https://pbs.twing.com/profikle_images/124011999041155 \"\r\n        alt=\"Netflix Logo\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","import React from 'react';\nimport './App.css';\nimport requests from './requests'\nimport Row from './Components/Row/Row.component'\nimport Banner from './Components/Banner/Banner.component'\nimport Nav from './Components/Navbar/Navbar.component'\n\nfunction App() {\n  return (\n    <div className=\"App\"> \n      <Nav />\n      <Banner />  \n      <Row title='Netflix Originals' fetchUrl={requests.fetchNetflixOriginals} \n      isLargeRow />\n      <Row title='Trending Now' fetchUrl={requests.fetchTrending} />\n      <Row title='Top rated' fetchUrl={requests.fetchTopRated} />\n      <Row title='Romance Movies' fetchUrl={requests.fetchRomanceMovies} />\n      <Row title='Action Movies' fetchUrl={requests.fetchActionMovies} />\n      <Row title='ComedyMovies' fetchUrl={requests.fetchComedyMovies} />\n      <Row title='Horror Movies' fetchUrl={requests.fetchHorrrorMovies} />\n      <Row title='Documentaries' fetchUrl={requests.fetchDocumentries} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}